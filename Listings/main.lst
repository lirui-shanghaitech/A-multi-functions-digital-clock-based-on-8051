C51 COMPILER V9.57.0.0   MAIN                                                              11/30/2018 17:18:27 PAGE 1   


C51 COMPILER V9.57.0.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Objects\main.obj
COMPILER INVOKED BY: F:\C51\BIN\C51.EXE code\main.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\main.ls
                    -t) TABS(2) OBJECT(.\Objects\main.obj)

line level    source

   1          #include "pins.h"
   2          #include "LCD1602.h"
   3          #include "DS1302.h"
   4          #include "DS18B20.h"
   5          #include "EEPROM.h"
   6          
   7          
   8          struct time_and_date SetTime;
   9          //Infrared.
  10          //--------------------------------------------------------------------------------------
  11          bit ir_finish = 0; //Ir flag if recieved data, set to 1, else set to 0.
  12          unsigned char ir_data[4]; //Data buffer since there are 4 bytes need to be recieved.
  13          const uint8 code ir_map[][2] = {  //???????PC??????
  14              {0x45,0x00}, {0x46,0x00}, {0x47,0x1B}, //??->?  Mode->?   ??->ESC
  15              {0x44,0x00}, {0x40,0x25}, {0x43,0x27}, //??->?  ??->?? ??->??
  16              {0x07,0x00}, {0x15,0x28}, {0x09,0x26}, // EQ->?   ??->?? ??->??
  17              {0x16, '0'}, {0x19,0x1B}, {0x0D,0x0D}, //'0'->'0'  ??->ESC  U/SD->??
  18              {0x0C, '1'}, {0x18, '2'}, {0x5E, '3'}, //'1'->'1'  '2'->'2'   '3'->'3'
  19              {0x08, '4'}, {0x1C, '5'}, {0x5A, '6'}, //'4'->'4'  '5'->'5'   '6'->'6'
  20              {0x42, '7'}, {0x52, '8'}, {0x4A, '9'}, //'7'->'7'  '6'->'8'   '9'->'9'
  21          };
  22          //---------------------------------------------------------------------------------------
  23          
  24          //Song
  25          //---------------------------------------------------------------------------------------
  26          code unsigned char FH[] = {0xF2,0xF3,0xF5,0xF5,0xF6,0xF7,0xF8,
  27          0xF9,0xF9,0xFA,0xFA,0xFB,0xFB,0xFC,
  28          0xFC,0xFC,0xFD,0xFD,0xFD,0xFD,0xFE,
  29          0xFE,0xFE,0xFE,0xFE,0xFE,0xFE,0xFF};
  30          
  31          code unsigned char FL[] = {
  32          0x42, 0xC1, 0x17, 0xB6, 0xD0, 0xD1, 0xB6,
  33          0x21, 0xE1, 0x8C, 0xD8, 0x68, 0xE9, 0x5B, 
  34          0x8F,0xEE, 0x44, 0x6B, 0xB4, 0xF4, 0x2D,
  35          0x47, 0x77, 0xA2, 0xB6, 0xDA, 0xFA, 0x16}; 
  36          
  37          code unsigned char song_code[] = {6, 2, 3, 5, 2, 1, 3, 2, 2, 5, 2, 2, 1, 3, 2, 6, 2, 1, 5, 2, 1,6, 2, 4, 3
             -, 2, 2, 5, 2, 1, 6, 2, 1, 5, 2, 2, 3, 2, 2, 1, 2, 1,6, 1, 1, 5, 2, 1, 3, 2, 1, 2, 2, 4, 2, 2, 3, 3, 2, 1, 5, 2, 2,
  38          5, 2, 1, 6, 2, 1, 3, 2, 2, 2, 2, 2, 1, 2, 4, 5, 2, 3, 3, 2, 1,2, 2, 1, 1, 2, 1, 6, 1, 1, 1, 2, 1, 5, 1, 6,
             - 0, 0, 0};
  39          
  40          unsigned char song_timer1_high = 0;   //High eight bits for timer1.
  41          unsigned char song_timer1_low = 0;    //Low eight bits for timer1.
  42          unsigned char song_time = 1;
  43          
  44          //Function defined at here.
  45          void song_begin(void);
  46          void song_delay(unsigned char t);
  47          //---------------------------------------------------------------------------------------
  48            
  49          void delayms(unsigned int itime);
  50          void show_time(struct time_and_date *tim);
  51          void show_temp();
  52          void eeprom_store_time(struct time_and_date *tim);
C51 COMPILER V9.57.0.0   MAIN                                                              11/30/2018 17:18:27 PAGE 2   

  53          void ir_key_serve(void);
  54          void ir_init(void);
  55          
  56          void delay200ms(void)
  57          {
  58   1          unsigned char i,j,k;
  59   1          for(i=201;i>0;i--)
  60   1          for(j=32;j>0;j--)
  61   1          for(k=14;k>0;k--);
  62   1      }
  63          
  64          
  65          unsigned char psec;
  66          void main(void) {
  67   1        //unsigned char buf[6];
  68   1        unsigned char i = 0;
  69   1        IT0=1;
  70   1        EX0=1;
  71   1        EA=1; 
  72   1      
  73   1        IR_DATA=1;
  74   1        lcd_init();
  75   1        ds1302_init();
  76   1        ds18b20_start_transition();
  77   1        ds1302_get_time(&SetTime);
  78   1        eeprom_store_time(&SetTime);
  79   1        delayms(30);
  80   1        RCAP2H=0x02; 
  81   1        RCAP2L=0x18;
  82   1      
  83   1        ET2=1;
  84   1        EA=1;
  85   1        TR2=1;
  86   1        ir_init();
  87   1        while(1){
  88   2          
  89   2          //if (i == 40) {
  90   2            
  91   2          //  eeprom_read_multi(buf, 0x30, 6);
  92   2          //  delay200ms();
  93   2          //  eeprom_store_time(&SetTime);
  94   2            
  95   2          //  SetTime.year = buf[0];
  96   2          //  SetTime.month = buf[1];
  97   2          //  SetTime.day = buf[2];
  98   2          //  SetTime.hour = buf[3];
  99   2          //  SetTime.minute = buf[4];
 100   2          //  SetTime.second = buf[5];
 101   2          //  i = 0;
 102   2          //  ds1302_date_to_str (&SetTime);
 103   2          //  ds1302_time_to_str(&SetTime);
 104   2          //  lcd_show_string(0, 1, SetTime.DateString);
 105   2          //  lcd_show_string(8, 1, SetTime.TimeString);
 106   2          //  //delayms(500);
 107   2          // }
 108   2          
 109   2          
 110   2          song_begin();
 111   2          //delay200ms();
 112   2          //i++;
 113   2          //psec = SetTime.second;
 114   2        }
C51 COMPILER V9.57.0.0   MAIN                                                              11/30/2018 17:18:27 PAGE 3   

 115   1      }
 116          
 117          void delayms(unsigned int itime){
 118   1        unsigned int i,j;
 119   1        for (i = 0;i<itime; i++)
 120   1          for (j = 0;j<1275;j++);
 121   1      }
 122          
 123          void show_time(struct time_and_date *tim)
 124          {
 125   1          unsigned char str[18];
 126   1          
 127   1          str[0]  = ((tim->year>>4) & 0xF) + '0';  
 128   1          str[1]  = (tim->year & 0x0F) + '0';
 129   1          str[2]  = '-';
 130   1          str[3]  = (tim->month >> 4) + '0';   
 131   1          str[4]  = (tim->month & 0x0F) + '0';
 132   1          
 133   1          str[5]  = (tim->day >> 4) + '0';   
 134   1          str[6]  = (tim->day & 0x0F) + '0';
 135   1          str[7]  = ' ';
 136   1          str[8] = (tim->hour >> 4) + '0';  
 137   1          str[9] = (tim->hour & 0x0F) + '0';
 138   1          str[10] = ':';
 139   1          str[11] = (tim->minute >> 4) + '0';   
 140   1          str[12] = (tim->minute & 0x0F) + '0';
 141   1          str[13] = ':';
 142   1          str[14] = (tim->second>> 4) + '0';   
 143   1          str[15] = (tim->second & 0x0F) + '0';
 144   1          str[16] = '\0';
 145   1          
 146   1          lcd_show_string(0, 0, "Temp:");  
 147   1          lcd_show_string(0, 1, str);
 148   1          
 149   1      }
 150          
 151          void show_temp() {
 152   1        int temper = 0;
 153   1        unsigned char str[5];
 154   1        unsigned char a,b;
 155   1        a = ds18b20_get_temp(&temper);
 156   1        b = ds18b20_start_transition();
 157   1        
 158   1        temper >>= 4;
 159   1        str[0] = (temper/10) + '0';
 160   1        str[1] = (temper%10) + '0';
 161   1        str[2] = '\'';
 162   1        str[3] = 'C';
 163   1        str[4] = '\0';
 164   1        lcd_show_string(0,0,"Temp:");
 165   1        lcd_show_string(8,0,str);
 166   1      }
 167          
 168          void Timer0Interrupt(void) interrupt 1
 169          {
 170   1          //TH0 = 0x10;
 171   1          //TL0 = 0x00;
 172   1          //ds1302_get_time(&SetTime);
 173   1          //if(psec != SetTime.second){
 174   1          //show_time();
 175   1          //add your code here!
 176   1      }
C51 COMPILER V9.57.0.0   MAIN                                                              11/30/2018 17:18:27 PAGE 4   

 177          
 178          void eeprom_store_time(struct time_and_date *tim) {
 179   1          unsigned char buffer[6];
 180   1          buffer[0] = 0x2018;
 181   1          buffer[1] = 0x11;
 182   1          buffer[2] = 0x27;
 183   1          buffer[3] = 0x12;
 184   1          buffer[4] = 0x00;
 185   1          buffer[5] = tim->second;
 186   1          eeprom_write_multi(buffer, 0x30, 6);
 187   1      }
 188          
 189          void Timer2_Server(void) interrupt 5 
 190          { 
 191   1        static unsigned char Timer2_Server_Count;
 192   1        RCAP2H=0x02; 
 193   1        RCAP2L=0x18;
 194   1        
 195   1        Timer2_Server_Count++; 
 196   1        if(Timer2_Server_Count==10)
 197   1        { 
 198   2          Timer2_Server_Count=0; 
 199   2          TF2=0;
 200   2          ds1302_get_time(&SetTime);
 201   2         ds1302_date_to_str (&SetTime);
 202   2         ds1302_time_to_str(&SetTime);
 203   2         lcd_show_string(0, 1, SetTime.DateString);
 204   2         lcd_show_string(8, 1, SetTime.TimeString);
 205   2         ir_key_serve();
 206   2         show_temp();
 207   2          //lcd_show_string(14,0,"md");
 208   2        } 
 209   1      }
 210          
 211          
 212          //--------------------------------------------------------------------------------------------------------
             ---------------------------------
 213          void ir_delay(unsigned int i)
 214          {
 215   1        while(i--); 
 216   1      }
 217          
 218          void ir_key_serve(void){
 219   1          unsigned char i = 0;
 220   1          if(ir_finish){
 221   2            ir_finish = 0;
 222   2            for (i = 0; i < 21; i++) {
 223   3              if(ir_data[2] == ir_map[i][0]) {
 224   4                lcd_set_cursor(13,0);
 225   4                lcd_write_data(ir_map[i][1]);
 226   4                //lcd_show_string(0,13, ir_map[i][1]);
 227   4                break;
 228   4              }
 229   3            }
 230   2          }
 231   1      }
 232          
 233          //Init the infrared equipment.
 234          void ir_init(void) {
 235   1        IR_DATA = 1;            //To prepare read the value.
 236   1        TMOD = 0x11;
 237   1        TH0 = 0x00;
C51 COMPILER V9.57.0.0   MAIN                                                              11/30/2018 17:18:27 PAGE 5   

 238   1        TL0 = 0x00;
 239   1        EA = 1;                 //Open the global interrupt
 240   1        ET0 = 0;                //Forbid the timer0 interrupt
 241   1        TR0 = 0;                //Shut down the timer0.
 242   1        IT0 = 1;                //Open the external interrupt0
 243   1        EX0 = 1;                //Using the edge triger.
 244   1      }
 245          
 246          //Get the low voltage time.
 247          unsigned int ir_get_high_time(){
 248   1        TH0 = 0;
 249   1        TL0 = 0;
 250   1        TR0 = 1;                //Open the timer 0
 251   1        while(IR_DATA) {        //Get the low time
 252   2          if (TH0 > 0X40)       //To prevent the wrong condition break if takes too long.
 253   2            break;
 254   2        }
 255   1        TR0 = 0;                //Shut down the timer0.
 256   1        return (TH0*256 + TL0);
 257   1      }
 258          
 259          //Get the high voltage time.
 260          unsigned int ir_get_low_time() {
 261   1        TH0 = 0;
 262   1        TL0 = 0;
 263   1        TR0 = 1;
 264   1        while(!IR_DATA){
 265   2          if (TH0 > 0x40)
 266   2            break;
 267   2        }
 268   1        TR0 = 0;
 269   1        return (TH0*256 + TL0);
 270   1      }
 271          
 272          //Interrupt0 serve function. Get the data.
 273          void ir_get_data() interrupt 0 {
 274   1        unsigned char i, j = 0;
 275   1        unsigned char recieved_byte;
 276   1        unsigned int tmp;
 277   1        tmp = ir_get_low_time();
 278   1        if((tmp < 7000) || (tmp > 10000)) {           //Get the first 9ms
 279   2          IE0 = 0;
 280   2          return;
 281   2        }
 282   1        
 283   1        tmp = ir_get_high_time();                     //Get the low 4.5ms
 284   1        if((tmp < 3500) || (tmp > 5000)) {
 285   2          IE0 = 0;
 286   2          return;
 287   2        }
 288   1        
 289   1        for(i = 0; i < 4; i++){
 290   2          for(j = 0;j < 8; j++) {
 291   3            tmp = ir_get_low_time();                  //Get the 560us low voltage.
 292   3            if((tmp < 310) || (tmp > 720)) {
 293   4              IE0 = 0;
 294   4              return;
 295   4            }
 296   3            
 297   3            tmp = ir_get_high_time();
 298   3            if ((tmp > 310) && (tmp < 720)) {         //If the time between 1460us to 1900us. set 1 else set 0.
 299   4              recieved_byte >>= 1;
C51 COMPILER V9.57.0.0   MAIN                                                              11/30/2018 17:18:27 PAGE 6   

 300   4            } else if ((tmp > 1300)&&(tmp < 1800)) {
 301   4              recieved_byte >>= 1;
 302   4              recieved_byte |= 0x80;
 303   4            } else {                                  //If not at that scope exist.
 304   4              IE0 = 0;
 305   4              return;
 306   4            }
 307   3          }
 308   2          ir_data[i] = recieved_byte;
 309   2        }
 310   1        ir_finish = 1;                                //Finish recieve.
 311   1        IE0 = 0;
 312   1      }
 313          
 314          //Interrupt0 serve function. Get the data.
 315          // void ir_get_data() interrupt 0 {
 316          //  unsigned char i, j = 0;
 317          //  //unsigned char recieved_byte;
 318          //  unsigned int tmp, time=0;
 319          
 320          //  ir_delay(700); //Delay 7ms
 321          //  if(IR_DATA == 0) {
 322          //    tmp = 1000;
 323          //    while((IR_DATA == 0)&&(tmp > 0)) {
 324          //      ir_delay(1);
 325          //      tmp--;
 326          //    }
 327          //    if(IR_DATA == 1) {
 328          //      tmp = 500;
 329          //      while((IR_DATA == 1)&&(tmp>0)) {
 330          //        ir_delay(1);
 331          //        tmp--;
 332          //      }
 333          //      for(i = 0;i<4;i++) {
 334          //        for (j = 0;j<8;j++){
 335          //          tmp = 60;
 336          //          while((IR_DATA == 0)&&(tmp>0)){
 337          //            ir_delay(1);
 338          //            tmp--;
 339          //          }
 340          //          tmp = 500;
 341          //          while((IR_DATA == 1)&&(tmp>0)) {
 342          //            ir_delay(10);
 343          //            time++;
 344          //            tmp--;
 345          //            if(time>30){
 346          //              return;
 347          //            }
 348          //          }
 349          //          ir_data[i] >>= 1;
 350          //          if(time>=8){
 351          //            ir_data[i] |=0x80;
 352          //          }
 353          //          time = 0;
 354          //        }
 355          //      }
 356          //      if(ir_data[2] != ~ir_data[3]){
 357          //        return;
 358          //      }
 359          //    }
 360          
 361          //  }
C51 COMPILER V9.57.0.0   MAIN                                                              11/30/2018 17:18:27 PAGE 7   

 362            
 363          // }
 364          
 365          //--------------------------------------------------------------------------------------------------------
             --------------------------------------------
 366          
 367          //--------------------------------------------------------------------------------------------------------
             --------------------------------------------
 368          void song_delay(unsigned char t) {
 369   1        unsigned char i;
 370   1        unsigned long j;
 371   1        for(i=0;i<t;i++)
 372   1          for(j=0;j<8000;j++);
 373   1        TR1 = 0;
 374   1      }
 375          
 376          
 377          void song_begin(void){
 378   1          unsigned char i,m = 0;
 379   1          i = 0;
 380   1          m = 0;
 381   1          song_time = 1;
 382   1          TMOD = 0x11;
 383   1          ET1 = 1;
 384   1          EA = 1;
 385   1          //BEEM = 0;
 386   1          while(song_time) {
 387   2            m = song_code[i] + 7*song_code[i+1] - 1;
 388   2            song_timer1_high = FH[m];
 389   2            song_timer1_low  = FL[m];
 390   2            song_time = song_code[i+2];
 391   2            i+=3;
 392   2            TH1 = song_timer1_high;
 393   2            TL1 = song_timer1_low;
 394   2            TR1 = 1;
 395   2            song_delay(song_time);
 396   2          }
 397   1      }
 398          
 399          //--------------------------------------------------------------------------------------------------------
             --------------------------------------------
 400          void Timer1Interrupt(void) interrupt 3 //Timer1's interrupt.
 401          {   
 402   1          TR1 = 0;
 403   1          BEEM = !BEEM;
 404   1          TH1 = song_timer1_high;
 405   1          TL1 = song_timer1_low;
 406   1          TR1 = 1;
 407   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1097    ----
   CONSTANT SIZE    =    206    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     35      43
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      1    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)

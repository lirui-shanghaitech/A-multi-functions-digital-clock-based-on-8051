C51 COMPILER V9.57.0.0   DS18B20                                                           12/05/2018 02:16:33 PAGE 1   


C51 COMPILER V9.57.0.0, COMPILATION OF MODULE DS18B20
OBJECT MODULE PLACED IN .\Objects\DS18B20.obj
COMPILER INVOKED BY: F:\C51\BIN\C51.EXE code\DS18B20.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\DS18
                    -B20.lst) TABS(2) OBJECT(.\Objects\DS18B20.obj)

line level    source

   1          #define _DS18B20_C
   2          #include "pins.h"
   3          #include "DS18B20.h"
   4          
   5          //Delay 10us, input is how many times of 10us for instance x=5, delay 50us.
   6          void delay10us(unsigned char x) {
   7   1        unsigned char i = 0;
   8   1        for(i=0;i<x;i++) {
   9   2          _nop_();
  10   2          _nop_();
  11   2          _nop_();
  12   2          _nop_();
  13   2          _nop_();
  14   2          _nop_();
  15   2          _nop_();
  16   2          _nop_();
  17   2        }
  18   1      }
  19          
  20          //Write one byte to DS18B20
  21          void ds18b20_write_byte(unsigned char dat) {
  22   1        unsigned char i = 0;
  23   1        unsigned char tmp = 0;
  24   1        tmp = dat;
  25   1        EA = 0;                   //Shut down the global interrupt, since DS18B20 need a strict time sequential.
  26   1        for (i=0;i<8;i++){
  27   2          DS18B20_IO = 0;             //Pull down IO 2us first.
  28   2          _nop_();
  29   2          _nop_();
  30   2          DS18B20_IO = tmp&0x01;          //Send one bit data.
  31   2          delay10us(6);
  32   2          DS18B20_IO = 1;             //Delay 60us for DS18B20 to read.
  33   2          tmp >>= 1;                //Send next bit.
  34   2        }
  35   1        EA = 1;
  36   1      }
  37          
  38          
  39          //Read one byte from DS18B20.
  40          unsigned char ds18b20_read_byte() {
  41   1        unsigned char dat, i;
  42   1        EA = 0;                   //Shut down the global interrupt, since DS18B20 need a strict time sequential.
  43   1      
  44   1        for (i = 0x01; i != 0; i<<=1) {
  45   2          DS18B20_IO = 0;             //Pull down IO 2us first.
  46   2          _nop_();
  47   2          _nop_();
  48   2          DS18B20_IO = 1;             //Pull up IO 2us first.
  49   2          _nop_();
  50   2          _nop_();
  51   2          if(DS18B20_IO)              //Read the value of DS18B20_IO
  52   2            dat = dat | i;            //If value equal to 1 set the corresponding bit of dat to 1.
  53   2          else
  54   2            dat = dat & (~i);         //If value equal to 0 set the corresponding bit of dat to 0.
C51 COMPILER V9.57.0.0   DS18B20                                                           12/05/2018 02:16:33 PAGE 2   

  55   2          delay10us(6);
  56   2        }
  57   1        EA = 1;                   //Open the global interrupt.
  58   1        return dat;
  59   1      }
  60          
  61          //Get the real time temperature from DS18B20, input is a pointer.
  62          bit ds18b20_get_temp(int *temperature) {
  63   1        unsigned char low, high;
  64   1        bit acknowlegement = 1;
  65   1      
  66   1        //Get the acknowlegement of DS18B20, if there exist, we will get 0, if not we will get 1.
  67   1        EA = 0;
  68   1        DS18B20_IO = 0;
  69   1        delay10us(50);
  70   1        DS18B20_IO = 1;
  71   1        delay10us(6);
  72   1        acknowlegement = DS18B20_IO;
  73   1        while(!DS18B20_IO);
  74   1        EA = 1;
  75   1      
  76   1        if(acknowlegement == 0) {
  77   2          ds18b20_write_byte(0xCC);         //Write 0xCC to skip the rom operation.
  78   2          ds18b20_write_byte(0xBE);         //Write 0xBE to send the read operation.
  79   2          low = ds18b20_read_byte();          //Read the lsb of the temperature.
  80   2          high = ds18b20_read_byte();         //Read the msb of the temperature.
  81   2          *temperature = ((int)high << 8) + low;    //Return the value using the pointer, total 16 bits.
  82   2        }
  83   1        return ~acknowlegement;             //If get the value successfully, return 1, else return 0.
  84   1      }
  85          
  86          //Start the transition of DS18B20.
  87          bit ds18b20_start_transition() {
  88   1        bit acknowlegement = 1;
  89   1      
  90   1        //Get the acknowlegement of DS18B20, if there exist, we will get 0, if not we will get 1.
  91   1        EA = 0;
  92   1        DS18B20_IO = 0;
  93   1        delay10us(50);
  94   1        DS18B20_IO = 1;
  95   1        delay10us(6);
  96   1        acknowlegement = DS18B20_IO;
  97   1        while(!DS18B20_IO);
  98   1        EA = 1;
  99   1      
 100   1        if(acknowlegement == 0) {
 101   2          ds18b20_write_byte(0xCC);         //Write 0xCC to skip the rom operation.
 102   2          ds18b20_write_byte(0x44);         //Start the temperature transition.
 103   2        }
 104   1      
 105   1        return ~acknowlegement;             //If get the value successfully, return 1, else return 0.
 106   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    202    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----       3
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----       2
C51 COMPILER V9.57.0.0   DS18B20                                                           12/05/2018 02:16:33 PAGE 3   

END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)

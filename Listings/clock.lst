C51 COMPILER V9.57.0.0   CLOCK                                                             12/05/2018 02:16:33 PAGE 1   


C51 COMPILER V9.57.0.0, COMPILATION OF MODULE CLOCK
OBJECT MODULE PLACED IN .\Objects\clock.obj
COMPILER INVOKED BY: F:\C51\BIN\C51.EXE code\clock.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\clock.
                    -lst) TABS(2) OBJECT(.\Objects\clock.obj)

line level    source

   1          #include "pins.h"
   2          #include "LCD1602.h"
   3          #include "DS1302.h"
   4          #include "DS18B20.h"
   5          #include "EEPROM.h"
   6          
   7          //Sytem variable, time, state, flag.
   8          //---------------------------
   9          enum system_state {DEFAULT, SETTING};   //Define the system state.
  10          enum system_state present_state;
  11          unsigned char cursor_index;         //Define the current setting index.
  12          struct time_and_date SetTime;         //Store the set time.
  13          struct time_and_date CurTime;       //Store the current time.
  14          bit mute_flag = 0;              //Mute flag, if mute set to 1 else set to 0.
  15          //unsigned char present_minute;       //Store the current second, to sense the hour.
  16          //unsigned char present_second;       //Store the curretn second, to sense the alarm.
  17          int present_temper = 0;           //Store the current temperature, to sense the alarm.
  18          bit uart_flag = 0;              //Make sure if uart start,if start set to 1, else set to 0.
  19          bit rd_flag = 1;              //Test if send temperature or date. 0 send data, 1 send temp.
  20          bit real_time = 1;
  21          unsigned char temp_counter = 0;
  22          //bit  forbid_song = 0;           //Since song and uart both use timer1 so when send the data we can not have a
             -larm.
  23          unsigned char uart_i= 0;          //Index of UART.
  24          //unsigned char buf[1];
  25          //---------------------------
  26          
  27          
  28          //Infrared variable, only used in infrared module.
  29          //---------------------------
  30          bit ir_finish = 0;              //Ir flag if recieved data, set to 1, else set to 0.
  31          unsigned char ir_data[4];           //Data buffer since there are 4 bytes need to be recieved.
  32          const uint8 code ir_map[][2] = {
  33              {0x45,'s'}, {0x46,'o'}, {0x47,'m'},     //shutdown  Mode   Mute
  34              {0x44,'u'}, {0x40,'l'}, {0x43,'r'},     //unknown   left   Right
  35              {0x07,'e'}, {0x15,'d'}, {0x09,'i'},     // EQ       Inc    Dec
  36              {0x16,'0'}, {0x19,'x'}, {0x0D,'y'},     //'0'->'0'  RPT    U/SD
  37              {0x0C,'1'}, {0x18,'2'}, {0x5E,'3'},     //'1'->'1'  '2'->'2'   '3'->'3'
  38              {0x08,'4'}, {0x1C,'5'}, {0x5A,'6'},     //'4'->'4'  '5'->'5'   '6'->'6'
  39              {0x42,'7'}, {0x52,'8'}, {0x4A,'9'},     //'7'->'7'  '6'->'8'   '9'->'9'
  40          };
  41          //---------------------------
  42          
  43          
  44          //Varaible use for song module only.
  45          //---------------------------
  46          code unsigned char FH[] = {           //Initila value for timer1 high eight bits
  47            0xF2,0xF3,0xF5,0xF5,0xF6,0xF7,0xF8,     //Low frequency
  48            0xF9,0xF9,0xFA,0xFA,0xFB,0xFB,0xFC,     //Medium freqency.
  49            0xFC,0xFC,0xFD,0xFD,0xFD,0xFD,0xFE,     //High frequency.
  50            0xFE,0xFE,0xFE,0xFE,0xFE,0xFE,0xFF      //Super high freqency.
  51          };
  52          
  53          code unsigned char FL[] = {           //Initila value for timer1 low eight bits
C51 COMPILER V9.57.0.0   CLOCK                                                             12/05/2018 02:16:33 PAGE 2   

  54            0x42, 0xC1, 0x17, 0xB6, 0xD0, 0xD1, 0xB6, //Low frequency
  55            0x21, 0xE1, 0x8C, 0xD8, 0x68, 0xE9, 0x5B,   //Medium freqency.
  56            0x8F,0xEE, 0x44, 0x6B, 0xB4, 0xF4, 0x2D,  //High frequency.
  57            0x47, 0x77, 0xA2, 0xB6, 0xDA, 0xFA, 0x16  //Super high freqency.
  58          }; 
  59          
  60          code unsigned char song_code[] = {        //The code of shi shang zhi you mama hao.
  61            6, 2, 3, 5, 2, 1, 3, 2, 2, 5, 
  62            2, 2, 1, 3, 2, 6, 2, 1, 5, 2, 
  63            1,6, 2, 4, 3, 2, 2, 5, 2, 1, 
  64            6, 2, 1, 5, 2, 2, 3, 2, 2, 1, 
  65            2, 1,6, 1, 1, 5, 2, 1, 3, 2, 
  66            1, 2, 2, 4, 2, 2, 3, 3, 2, 1,
  67            5, 2, 2,5, 2, 1, 6, 2, 1, 3, 
  68            2, 2, 2, 2, 2, 1, 2, 4, 5, 2, 
  69            3, 3, 2, 1,2, 2, 1, 1, 2, 1, 6,
  70            1, 1, 1, 2, 1, 5, 1, 6, 0, 0, 0
  71          };
  72          
  73          unsigned char song_timer1_high = 0;       //High eight bits for timer1.
  74          unsigned char song_timer1_low = 0;        //Low eight bits for timer1.
  75          unsigned char song_time = 1;
  76          //-------------------------------
  77          
  78          //Function definition.
  79          void song_begin(void);
  80          void song_delay(unsigned char t);
  81          
  82          void show_time(struct time_and_date *tim);
  83          void show_temp();
  84          void eeprom_store_time(struct time_and_date *tim);
  85          void ir_key_serve(void);
  86          void ir_init(void);
  87          
  88          void number_setting(unsigned char opcode);
  89          void cursor_shift_right();
  90          void cursor_shift_left();
  91          void cancel_set();
  92          void state_transition();
  93          void key_act(unsigned char key_op);
  94          void timer_config(void);
  95          
  96          
  97          /***
  98          Infrared module. Using timer0 to calculate the delay.
  99          Using the external interrupt 0 to sense the input signal.
 100          Here we need to change the mode of TMOD so we may change the 
 101          mode of timer1 need to cauciouse. 
 102          
 103          Global variable: ir_flag: check if finished recieve if done set to 1.
 104                   ir_data: store the recieved data, the third value is what we want.
 105          ***/
 106          //-------------------------------------------------------------------------------------
 107          void ir_delay(unsigned int i)
 108          {
 109   1        while(i--); 
 110   1      }
 111          
 112          //Use the key serve function to change the state of 
 113          void ir_key_serve(void){
 114   1          unsigned char i = 0;
 115   1          if(ir_finish){
C51 COMPILER V9.57.0.0   CLOCK                                                             12/05/2018 02:16:33 PAGE 3   

 116   2            ir_finish = 0;
 117   2            for (i = 0; i < 21; i++) {
 118   3              if(ir_data[2] == ir_map[i][0]) {
 119   4                //lcd_set_cursor(13,0);
 120   4                //lcd_write_data(ir_map[i][1]);
 121   4                //lcd_show_string(0,13, ir_map[i][1]);
 122   4                key_act(ir_map[i][1]);
 123   4                break;
 124   4              }
 125   3            }
 126   2          }
 127   1      }
 128          
 129          //Init the infrared equipment.
 130          void ir_init(void) {
 131   1        IR_DATA = 1;              //To prepare read the value.
 132   1        TMOD = 0x11;
 133   1        TH0 = 0x00;
 134   1          TL0 = 0x00;
 135   1          ET1 = 1;
 136   1        EA = 1;                 //Open the global interrupt
 137   1          ET0 = 0;                //Forbid the timer0 interrupt
 138   1        TR0 = 0;                //Shut down the timer0.
 139   1        IT0 = 1;                //Open the external interrupt0
 140   1        EX0 = 1;                //Using the edge triger.
 141   1      }
 142          
 143          //Get the low voltage time.
 144          unsigned int ir_get_high_time(){
 145   1        TH0 = 0;
 146   1        TL0 = 0;
 147   1        TR0 = 1;                //Open the timer 0
 148   1        while(IR_DATA) {            //Get the low time
 149   2          if (TH0 > 0X40)           //To prevent the wrong condition break if takes too long.
 150   2            break;
 151   2        }
 152   1        TR0 = 0;                //Shut down the timer0.
 153   1        return (TH0*256 + TL0);
 154   1      }
 155          
 156          //Get the high voltage time.
 157          unsigned int ir_get_low_time() {
 158   1        TH0 = 0;
 159   1        TL0 = 0;
 160   1        TR0 = 1;
 161   1        while(!IR_DATA){
 162   2          if (TH0 > 0x40)
 163   2            break;
 164   2        }
 165   1        TR0 = 0;
 166   1        return (TH0*256 + TL0);
 167   1      }
 168          
 169          //Interrupt0 serve function. Get the data.
 170          void ir_get_data() interrupt 0 {
 171   1        unsigned char i, j = 0;
 172   1        unsigned char recieved_byte;
 173   1        unsigned int tmp;
 174   1        tmp = ir_get_low_time();
 175   1        if((tmp < 7000) || (tmp > 10000)) {         //Get the first 9ms
 176   2          IE0 = 0;
 177   2          return;
C51 COMPILER V9.57.0.0   CLOCK                                                             12/05/2018 02:16:33 PAGE 4   

 178   2        }
 179   1        
 180   1        tmp = ir_get_high_time();             //Get the low 4.5ms
 181   1        if((tmp < 3500) || (tmp > 5000)) {
 182   2          IE0 = 0;
 183   2          return;
 184   2        }
 185   1        
 186   1        for(i = 0; i < 4; i++){
 187   2          for(j = 0;j < 8; j++) {
 188   3            tmp = ir_get_low_time();          //Get the 560us low voltage.
 189   3            if((tmp < 310) || (tmp > 720)) {
 190   4              IE0 = 0;
 191   4              return;
 192   4            }
 193   3            
 194   3            tmp = ir_get_high_time();
 195   3            if ((tmp > 310) && (tmp < 720)) {     //If the time between 1460us to 1900us. set 1 else set 0.
 196   4              recieved_byte >>= 1;
 197   4            } else if ((tmp > 1300)&&(tmp < 1800)) {
 198   4              recieved_byte >>= 1;
 199   4              recieved_byte |= 0x80;
 200   4            } else {                  //If not at that scope exist.
 201   4              IE0 = 0;
 202   4              return;
 203   4            }
 204   3          }
 205   2          ir_data[i] = recieved_byte;
 206   2        }
 207   1        ir_finish = 1;                    //Finish recieve.
 208   1        IE0 = 0;
 209   1      }
 210          //-------------------------------------------------------------------------------------
 211          
 212          //Function for singing a song: shi shang zhi you mama hao.
 213          //Here using timer1 to calculate delay.
 214          //-------------------------------------------------------------------------------------
 215          void song_delay(unsigned char t) {
 216   1        unsigned char i;
 217   1        unsigned long j;
 218   1        if ((mute_flag == 0)){
 219   2          for(i=0;i<t;i++)
 220   2            for(j=0;j<8000;j++);
 221   2          TR1 = 0;
 222   2        } else {
 223   2          TR1 = 0;
 224   2          return;
 225   2        }
 226   1        
 227   1      }
 228          
 229          void song_begin(void){
 230   1          unsigned char i,m = 0;
 231   1          
 232   1          //TMOD = 0x11;
 233   1          //ET1 = 1;
 234   1          if((mute_flag == 0)) {                      //If mute flag is 1, break the loop.
 235   2            EA = 1;
 236   2            i = 0;
 237   2            m = 0;
 238   2            //TMOD = 0x11;
 239   2            song_time = 1;
C51 COMPILER V9.57.0.0   CLOCK                                                             12/05/2018 02:16:33 PAGE 5   

 240   2            while(song_time) {
 241   3              
 242   3                m = song_code[i] + 7*song_code[i+1] - 1;
 243   3                song_timer1_high = FH[m];
 244   3                song_timer1_low  = FL[m];
 245   3                song_time = song_code[i+2];
 246   3                i+=3;
 247   3                TH1 = song_timer1_high;
 248   3                TL1 = song_timer1_low;
 249   3                TR1 = 1;
 250   3                song_delay(song_time);
 251   3              } 
 252   2          } else {
 253   2              return;
 254   2          }
 255   1      }
 256          //-------------------------------------------------------------------------------------
 257          
 258          
 259          //Some interrupt functions.
 260          //-------------------------------------------------------------------------------------
 261          void Timer0Interrupt(void) interrupt 1    //Timer0's interrupt.
 262          {
 263   1      
 264   1      }
 265          
 266          void Timer1Interrupt(void) interrupt 3    //Timer1's interrupt.
 267          { 
 268   1        if(uart_flag == 0) {
 269   2          TR1 = 0;
 270   2            BEEM = !BEEM;
 271   2          TH1 = song_timer1_high;
 272   2            TL1 = song_timer1_low;
 273   2          TR1 = 1;
 274   2        }
 275   1      }
 276          
 277          void interruptUART() interrupt 4{
 278   1        unsigned char a;
 279   1        if (RI) {
 280   2          RI = 0;   //Clear RI manually.
 281   2          a = SBUF;
 282   2          SBUF = a;
 283   2        } 
 284   1        if (TI) {
 285   2          TI = 0; //Clear TI manually
 286   2          if (real_time == 1) {
 287   3            SBUF = CurTime.TimeString[uart_i];
 288   3          } else {
 289   3            SBUF = SetTime.TimeString[uart_i];
 290   3          }
 291   2          uart_i++;
 292   2          if (uart_i >9)
 293   2            //SBUF = ' ';
 294   2            uart_i = 0;
 295   2        }
 296   1      }
 297          
 298          void Timer2_Server(void) interrupt 5    //Timer2's interrupt.
 299          { 
 300   1        static unsigned char Timer2_Server_Count;
 301   1        RCAP2H= 0x3C; 
C51 COMPILER V9.57.0.0   CLOCK                                                             12/05/2018 02:16:33 PAGE 6   

 302   1        RCAP2L= 0x0B0;
 303   1        
 304   1        Timer2_Server_Count++; 
 305   1        if(Timer2_Server_Count==10)
 306   1        { 
 307   2          Timer2_Server_Count=0; 
 308   2          TF2=0;
 309   2          ir_key_serve();
 310   2          if (present_state == DEFAULT){
 311   3            lcd_close_cursor();
 312   3            ds1302_get_time(&CurTime);
 313   3            ds1302_date_to_str (&CurTime);
 314   3            ds1302_time_to_str(&CurTime);
 315   3            lcd_show_string(0, 1, CurTime.DateString);
 316   3            lcd_show_string(8, 1, CurTime.TimeString);
 317   3            lcd_set_cursor(11, 0);
 318   3            lcd_write_data((CurTime.week & 0x0F) + '0');
 319   3            if(rd_flag == 0 && uart_flag == 1){
 320   4              eeprom_write_multi(CurTime.TimeString, 0x00, 8);
 321   4            } else if (uart_flag == 1 && rd_flag == 1){
 322   4              eeprom_read_multi(SetTime.TimeString, 0x00, 8);
 323   4            }
 324   3          } 
 325   2        }
 326   1        temp_counter++;
 327   1        if (temp_counter == 20) {
 328   2          if (present_state == DEFAULT){
 329   3            show_temp();
 330   3          }
 331   2          temp_counter = 0;
 332   2        }
 333   1      }
 334          //-------------------------------------------------------------------------------------
 335          
 336          //Display function. & Store value function.
 337          //-------------------------------------------------------------------------------------
 338          void show_temp() {
 339   1        int temper = 0;
 340   1        unsigned char str[5];
 341   1        unsigned char a,b;
 342   1        a = ds18b20_get_temp(&temper);
 343   1        b = ds18b20_start_transition();
 344   1        
 345   1        temper >>= 4;
 346   1        present_temper = temper;
 347   1        str[0] = (temper/10) + '0';
 348   1        str[1] = (temper%10) + '0';
 349   1        str[2] = '\'';
 350   1        str[3] = 'C';
 351   1        str[4] = '\0';
 352   1        lcd_show_string(0,0,"T:");
 353   1        lcd_show_string(2,0,str);
 354   1      }
 355          
 356          //Show some static string. So we don not need to refresh it.
 357          void show_init() {
 358   1        lcd_clear_screen();
 359   1        lcd_show_string(0, 0, "T:");
 360   1        lcd_show_string(4, 0, "'C");
 361   1        lcd_show_string(7, 0, "week");
 362   1        lcd_close_cursor(); 
 363   1        if(mute_flag == 1){
C51 COMPILER V9.57.0.0   CLOCK                                                             12/05/2018 02:16:33 PAGE 7   

 364   2          lcd_show_string(13,0,"Mut");
 365   2        } else {
 366   2          lcd_show_string(13,0,"Dis");
 367   2        }
 368   1      }
 369          
 370          void eeprom_store_time(struct time_and_date *tim) {
 371   1          unsigned char buffer[6];
 372   1          buffer[0] = 0x2018;
 373   1          buffer[1] = 0x11;
 374   1          buffer[2] = 0x27;
 375   1          buffer[3] = 0x12;
 376   1          buffer[4] = 0x00;
 377   1          buffer[5] = tim->second;
 378   1          eeprom_write_multi(buffer, 0x30, 6);
 379   1      }
 380          //-------------------------------------------------------------------------------------
 381          
 382          //Main function some initialize.
 383          //-------------------------------------------------------------------------------------
 384          void main(void) {
 385   1        //unsigned char buf[6];
 386   1        unsigned char i = 0;
 387   1        IT0=1;
 388   1        EX0=1;
 389   1        EA=1; 
 390   1      
 391   1        IR_DATA=1;
 392   1        lcd_init();
 393   1        ds1302_init();
 394   1        ds18b20_start_transition();
 395   1        ds1302_get_time(&SetTime);
 396   1        eeprom_store_time(&SetTime);
 397   1        //delayms(30);
 398   1        RCAP2H= 0x3C; 
 399   1        RCAP2L= 0x0B0;
 400   1      
 401   1        ET2=1;
 402   1        EA=1;
 403   1        TR2=1;
 404   1        ir_init();
 405   1        show_init();
 406   1        while(1){
 407   2      
 408   2          if (((CurTime.minute >> 4) == 0) && ((CurTime.minute & 0x0F) == 0) && ((CurTime.second >> 4) == 0) && ((
             -CurTime.second & 0x0F) <= 1)) {
 409   3              if ((mute_flag == 0)) {
 410   4                song_begin();
 411   4              }
 412   3          } else if((present_temper/10>=2) && (present_temper%10>=8)){
 413   3            if((mute_flag == 0))
 414   3              song_begin();
 415   3          }
 416   2        }
 417   1      }
 418          //-------------------------------------------------------------------------------------
 419          
 420          //Key action and state transition function.
 421          //-------------------------------------------------------------------------------------
 422          
 423          //Acting when dectect key was pressed.
 424          void key_act(unsigned char key_op) {
C51 COMPILER V9.57.0.0   CLOCK                                                             12/05/2018 02:16:33 PAGE 8   

 425   1        if((key_op >= '0') && (key_op <= '9')) {
 426   2          number_setting(key_op);
 427   2        } else if (key_op == 'r') {                 //Set cursor right, when right key was pressed.
 428   2          cursor_shift_right();
 429   2        } else if(key_op == 'l') {                  //Set cursor left, when left key was pressed
 430   2          cursor_shift_left();
 431   2        } else if(key_op == 'o') {                  //Change the state of the system. when mode key was pressed.
 432   2          state_transition();
 433   2        } else if(key_op == 'm') {                  //Change the state to mute state, if mute key was pressed.
 434   2          if (present_state == DEFAULT) {             //If the current state is default state just mute the song.
 435   3            mute_flag = ~mute_flag;
 436   3            if(mute_flag == 1){
 437   4              lcd_show_string(13,0,"Mut");
 438   4            } else {
 439   4              lcd_show_string(13,0,"Dis");
 440   4            }
 441   3          } else {
 442   3            cancel_set();                   //else cancel the current setting.
 443   3          }
 444   2        } else if(key_op == 'y') {
 445   2          uart_flag = ~uart_flag;
 446   2          //mute_flag = 1;
 447   2          if(uart_flag == 1) {
 448   3            lcd_show_string(13,0,"UAR");
 449   3          } else if (mute_flag == 1){
 450   3            lcd_show_string(13,0,"Mut");
 451   3          } else if(mute_flag == 0) {
 452   3            lcd_show_string(13,0,"Dis");
 453   3          }
 454   2          timer_config();
 455   2        } else if (key_op == 'x') {
 456   2          if (rd_flag == 0 && uart_flag == 1) {
 457   3            lcd_show_string(13,0,"EWR");
 458   3          } else if (rd_flag == 1 && uart_flag == 1) {
 459   3            lcd_show_string(13,0,"ERD");
 460   3          }
 461   2          rd_flag = ~rd_flag;
 462   2        } else if (key_op == 'e') {
 463   2          real_time = ~real_time;
 464   2        }
 465   1      }
 466          
 467          void state_transition() {
 468   1        if (present_state == DEFAULT) {
 469   2          present_state = SETTING;                //Change the current state to setting time state.
 470   2          SetTime.hour = CurTime.hour;              //Store the current time to buffer.
 471   2          SetTime.minute = CurTime.minute;
 472   2          SetTime.second = CurTime.second;
 473   2          SetTime.week   = CurTime.week;
 474   2          SetTime.year   = CurTime.year;
 475   2          SetTime.month  = CurTime.month;
 476   2          SetTime.day    = CurTime.day;
 477   2          lcd_show_string(13,0,"SET");
 478   2          cursor_index = 20;                    //Set the cursor when user press the key it will set at most left location
 479   2          cursor_shift_right();
 480   2          lcd_open_cursor();                    //Open the cursor.
 481   2      
 482   2        } else if(present_state == SETTING) {
 483   2          present_state = DEFAULT;                //Set the present state to the default state.
 484   2          ds1302_set_time(&SetTime);                //Give the setting time to ds1302. Updata the time.
 485   2          lcd_close_cursor();
 486   2          if(mute_flag == 1){
C51 COMPILER V9.57.0.0   CLOCK                                                             12/05/2018 02:16:33 PAGE 9   

 487   3            lcd_show_string(13,0,"Mut");
 488   3          } else {
 489   3            lcd_show_string(13,0,"Dis");
 490   3          }
 491   2        }
 492   1      }
 493          
 494          //Cancel the current setting,if user press the mute key at setting state.
 495          void cancel_set() {
 496   1        present_state = DEFAULT;
 497   1        lcd_close_cursor();
 498   1        lcd_clear_screen();
 499   1        lcd_show_string(7, 0, "week");
 500   1        ds1302_date_to_str (&CurTime);              //Write the setting time to lcd.
 501   1        ds1302_time_to_str(&CurTime);
 502   1        lcd_show_string(0, 1, CurTime.DateString);
 503   1        lcd_show_string(8, 1, CurTime.TimeString);
 504   1        lcd_set_cursor(11, 0);
 505   1        lcd_write_data((CurTime.week & 0x0F) + '0');
 506   1        if(mute_flag == 1){
 507   2            lcd_show_string(13,0,"Mut");
 508   2        } else {
 509   2            lcd_show_string(13,0,"Dis");
 510   2        }
 511   1        show_temp();
 512   1      }
 513          
 514          void timer_config(void) {
 515   1        if(uart_flag) {
 516   2          TMOD = 0x21;                    //Timer1 8 auto, Timer0,16 bit timer.
 517   2          SCON = 0x50;
 518   2          PCON = 0x00;
 519   2            TH1 = 0xE6;
 520   2            TL1 = TH1;
 521   2            EA = 1;
 522   2            ET1 = 0;
 523   2            ES = 1;
 524   2            TR1 = 1;
 525   2        } else {
 526   2          TMOD = 0X11;
 527   2          TH1 = 0;
 528   2          TL1 = 0;
 529   2          EA = 1;
 530   2          ET1 = 1;
 531   2          ES = 0;
 532   2          TR1 = 0;
 533   2        }
 534   1      }
 535          //-------------------------------------------------------------------------------------
 536          
 537          
 538          //Set operation function, set number, shift left, shift right.
 539          //-------------------------------------------------------------------------------------
 540          void cursor_shift_right() {
 541   1        if(present_state == SETTING) {
 542   2          //lcd_open_cursor();
 543   2          switch (cursor_index) {
 544   3            case 0: cursor_index = 1; lcd_set_cursor(0,1); break; //Year second position
 545   3            case 1: cursor_index = 2; lcd_set_cursor(1,1); break; //Month first position
 546   3            case 2: cursor_index = 3; lcd_set_cursor(3,1); break;   //Month first position
 547   3            case 3: cursor_index = 4; lcd_set_cursor(4,1); break;   //Day first position
 548   3            case 4: cursor_index = 5; lcd_set_cursor(6,1); break;   //Day second position.
C51 COMPILER V9.57.0.0   CLOCK                                                             12/05/2018 02:16:33 PAGE 10  

 549   3            case 5: cursor_index = 6; lcd_set_cursor(7,1); break;   //Hour first position.
 550   3            case 6: cursor_index = 7; lcd_set_cursor(8,1); break;   //Hour second position.
 551   3            case 7: cursor_index = 8; lcd_set_cursor(9,1); break;   //Minute first position.
 552   3            case 8: cursor_index = 9; lcd_set_cursor(11,1); break;  //Minute second position.
 553   3            case 9: cursor_index = 10; lcd_set_cursor(12,1); break; //Second first position.
 554   3            case 10: cursor_index = 11; lcd_set_cursor(14,1); break;//Second second position.
 555   3            case 11: cursor_index = 12; lcd_set_cursor(15,1); break;//Week position.
 556   3            default: cursor_index = 0; lcd_set_cursor(11,0); break;  //Back to begin.
 557   3          }
 558   2        }
 559   1      }
 560          
 561          void cursor_shift_left() {
 562   1        //lcd_open_cursor();
 563   1        if(present_state == SETTING) {
 564   2          switch (cursor_index) {
 565   3            case 0: cursor_index = 12; lcd_set_cursor(15,1); break;
 566   3            case 1: cursor_index = 0; lcd_set_cursor(11,0); break;
 567   3            case 2: cursor_index = 1; lcd_set_cursor(0,1); break;
 568   3            case 3: cursor_index = 2; lcd_set_cursor(1,1); break;
 569   3            case 4: cursor_index = 3; lcd_set_cursor(3,1); break;
 570   3            case 5: cursor_index = 4; lcd_set_cursor(4,1); break;
 571   3            case 6: cursor_index = 5; lcd_set_cursor(6,1); break;
 572   3            case 7: cursor_index = 6; lcd_set_cursor(7,1); break;
 573   3            case 8: cursor_index = 7; lcd_set_cursor(8,1); break;
 574   3            case 9: cursor_index = 8; lcd_set_cursor(9,1); break;
 575   3            case 10: cursor_index = 9; lcd_set_cursor(11,1); break;
 576   3            case 11: cursor_index = 10; lcd_set_cursor(12,1); break;
 577   3            default: cursor_index = 11; lcd_set_cursor(14,1); break;
 578   3          }
 579   2        }
 580   1      }
 581                  
 582          
 583          void number_setting(unsigned char opcode) {
 584   1        unsigned char numb = 0;
 585   1        numb = opcode - '0';
 586   1        //lcd_open_cursor();
 587   1        if(numb <= 9) {
 588   2          if (present_state == SETTING) {               //Only change when we are at setting mode.
 589   3            switch (cursor_index) {
 590   4              case 0:  {
 591   5                if (numb>7)
 592   5                  numb = 7;
 593   5                SetTime.week = (SetTime.week&0xF0)|(numb);
 594   5                lcd_show_char(11,0,opcode);
 595   5                break;
 596   5              };
 597   4              case 1: SetTime.year = (SetTime.year&0xFF0F)|(numb << 4); lcd_show_char(0,1,opcode); break;
 598   4              case 2: SetTime.year = (SetTime.year&0xFFF0)|(numb); lcd_show_char(1,1,opcode); break;
 599   4              case 3: SetTime.month = (SetTime.month&0x0F)|(numb<<4); lcd_show_char(3,1,opcode); break;
 600   4              case 4: SetTime.month = (SetTime.month&0xF0)|(numb); lcd_show_char(4,1,opcode); break;
 601   4              case 5: SetTime.day = (SetTime.day&0x0F)|(numb<<4); lcd_show_char(6,1,opcode); break;
 602   4              case 6: SetTime.day = (SetTime.day&0xF0)|(numb); lcd_show_char(7,1,opcode); break;
 603   4              case 7: SetTime.hour = (SetTime.hour&0x0F)|(numb<<4); lcd_show_char(8,1,opcode); break;
 604   4              case 8: SetTime.hour = (SetTime.hour&0xF0)|(numb); lcd_show_char(9,1,opcode); break;
 605   4              case 9: SetTime.minute = (SetTime.minute&0x0F)|(numb<<4); lcd_show_char(11,1,opcode); break;
 606   4              case 10: SetTime.minute = (SetTime.minute&0xF0)|(numb); lcd_show_char(12,1,opcode); break;
 607   4              case 11: SetTime.second = (SetTime.second&0x0F)|(numb<<4); lcd_show_char(14,1,opcode); break;
 608   4              default: SetTime.second = (SetTime.second&0xF0)|(numb); lcd_show_char(15,1,opcode); break;
 609   4            }
 610   3          }
C51 COMPILER V9.57.0.0   CLOCK                                                             12/05/2018 02:16:33 PAGE 11  

 611   2          cursor_shift_right();                   //Shift to right automatically.
 612   2        }
 613   1      }
 614          //-------------------------------------------------------------------------------------
 615          
 616          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   2313    ----
   CONSTANT SIZE    =    235    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     66      28
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      5    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
